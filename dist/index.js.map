{"version":3,"sources":["../src/index.ts","../src/wait.ts","../src/data/array-flatten.ts","../src/data/array-search-in-by-field.ts","../src/data/array-to-chunks.ts","../src/data/array-uniq-by.ts","../src/data/object-sort-by-fields.ts","../src/data/to-array.ts","../src/data/group-by.ts","../src/random/number.ts","../src/random/uuid.ts","../src/random/array.ts","../src/validators/is-valid-date.ts","../src/validators/is-valid-email.ts","../src/validators/is-valid-number.ts","../src/validators/is-number-in-range.ts","../src/validators/is-positive-number.ts","../src/strings/trim-by-size.ts","../src/strings/pad.ts","../src/strings/capitalize.ts","../src/strings/trim.ts","../src/date/index.ts","../src/data/merge-deep.ts","../src/data/object-keys.ts","../src/strings/to-hex.ts","../src/strings/base64.ts","../src/numbers/preformat-float.ts","../src/numbers/valid.ts"],"sourcesContent":["export * from './wait'\nexport * from './data/array-flatten'\nexport * from './data/array-search-in-by-field'\nexport * from './data/array-to-chunks'\nexport * from './data/array-uniq-by'\nexport * from './data/object-sort-by-fields'\nexport * from './data/to-array'\nexport * from './data/group-by'\nexport * from './random/number'\nexport * from './random/uuid'\nexport * from './random/array'\nexport * from './validators/is-valid-date'\nexport * from './validators/is-valid-email'\nexport * from './validators/is-valid-number'\nexport * from './validators/is-number-in-range'\nexport * from './validators/is-positive-number'\nexport * from './strings/trim-by-size'\nexport * from './strings/pad'\nexport * from './strings/capitalize'\nexport * from './strings/trim'\nexport * from './date/index'\nexport * from './data/merge-deep'\nexport * from './data/object-keys'\nexport * from './strings/to-hex'\nexport * from './strings/base64'\nexport * from './numbers/preformat-float'\nexport * from './numbers/valid'\n","export async function wait(time: number): Promise<null> {\n  return new Promise((resolve) => setTimeout(() => resolve(null), time))\n}\n","export function arrayFlatten<T>(arr: T[]): T[] {\n  return arr.flat(Number.POSITIVE_INFINITY) as T[]\n}\n","type FieldExtractor<T> = (sub: T) => string\n\nexport function escapeRegex(string: string) {\n  const reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g\n  const reHasRegExpChar = RegExp(reRegExpChar.source)\n  return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\\\$&') : string || ''\n}\n\nexport function searchArrayFilter<T>(array: T[], searchString: string, _fields: (keyof T)[] | FieldExtractor<T>) {\n  if (!searchString) {\n    return array\n  }\n  const reg = new RegExp(escapeRegex(searchString).toLowerCase(), 'ig')\n  return array.filter((sub: T) => {\n    const fields = (typeof _fields === 'function' ? _fields(sub) : _fields.map((field) => sub[field])) as string[]\n\n    return fields.some((field) => !!encodeURI(String(field).toLowerCase()).match(reg))\n  })\n}\n","export function arrayToChunks<T>(arr: T[], len: number): T[][] {\n  const chunks = []\n  let i = 0\n  const n = arr.length\n  while (i < n) {\n    chunks.push(arr.slice(i, i + len))\n    i += len\n  }\n  return chunks\n}\n","export function uniqBy<T>(array: T[], getter: (item: T) => string) {\n  const result = []\n  const map = new Map()\n  for (const item of array) {\n    const id = getter(item)\n    if (!map.has(id)) {\n      map.set(id, true)\n      result.push(item)\n    }\n  }\n  return result\n}\n","export function objectSortByFields<T>(unsorted: T): T {\n  return Object.keys(unsorted)\n    .sort()\n    .reduce((obj: T, key: string) => {\n      obj[key] = typeof unsorted[key] === 'object' ? objectSortByFields(unsorted[key]) : unsorted[key]\n      return obj\n    }, {} as T)\n}\n","export function toArray<T>(any: T | T[]): T[] {\n  return Array.isArray(any) ? any : [any]\n}\n","export const groupBy = <T>(items: T[], getter: (item: T) => string) =>\n  items.reduce((groups, item: T) => {\n    const dateKey = getter(item)\n\n    if (!groups[dateKey]) {\n      return Object.assign(groups, {\n        [dateKey]: {\n          key: dateKey,\n          items: [item],\n        },\n      })\n    }\n    groups[dateKey].items.push(item)\n    return groups\n  }, {})\n","export function randomNumber(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n","const s4 = (): string =>\n  Math.floor((1 + Math.random()) * 0x10000)\n    .toString(16)\n    .substring(1)\n\nexport function uuid(len = 100): string {\n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`.slice(0, len)\n}\n","export const randomFromArray = <T>(items: T[]): T => items[Math.floor(Math.random() * items.length)]\n","export function isValidDate(value: string): boolean {\n  const parsedDate = Date.parse(value)\n  return !Number.isNaN(parsedDate)\n}\n","// eslint-disable-next-line max-len\nexport const EMAIL_REGEXP =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport function isValidEmail(email: string): boolean {\n  if (!email) return false\n  return EMAIL_REGEXP.test(email)\n}\n","export function isValidNumber(value: string): boolean {\n  return !Number.isNaN(Number.parseFloat(value)) && !Number.isNaN(Number(value))\n}\n","export function isNumberInRange(value: number, min: number, max: number): boolean {\n  return Number(value) >= min && Number(value) <= max\n}\n","import { isValidNumber } from './is-valid-number'\n\nexport function isPositiveNumber(value: string): boolean {\n  return isValidNumber(value) && Number(value) > 0\n}\n","export function trimBySize(str: string, max: number): string {\n  if (!str) return str\n  return str.length > max ? str.substring(0, max) : str\n}\n","export function pad(num: string | number, size = 2) {\n  let n = String(num)\n  while (n.length < size) n = `0${n}`\n  return n\n}\n","export function capitalize(string: string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n","export const trim = (str: string | number | null | undefined): string => {\n  if (!str) return ''\n  return String(str).trim()\n}\n","import { capitalize } from '../strings/capitalize'\nimport { pad } from '../strings/pad'\n\nconst monthNamesShort = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\nconst monthNamesLong = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n]\n\nexport function dateFormat(template: string, date?: Date | number) {\n  const specs = 'hh:TT:tt:MMMM:Mmmm:MMM:Mmm:YYYY:MM:DD:HH:mm:ss'.split(':')\n  // eslint-disable-next-line no-param-reassign\n  const d = new Date(date || Date.now())\n  const m = d.getMonth()\n  const h = d.getHours()\n  const TT = h > 12 ? 'PM' : 'AM'\n  const hh = pad(h % 12 || 12)\n  const iso = `${hh}:${TT}:${TT.toLowerCase()}:${monthNamesLong[m]}:${capitalize(monthNamesLong[m])}:${\n    monthNamesShort[m]\n  }:${capitalize(monthNamesShort[m])}:${d.toISOString()}`\n  return iso.split(/[-:.TZ]/).reduce((template, item, i) => template.split(specs[i]).join(item), template)\n}\n\nexport const dateAddDays = (date: number | Date, days: number): Date => {\n  const result = new Date(date)\n  result.setDate(result.getDate() - days)\n  return result\n}\n","export function isObject(item): boolean {\n  return item && typeof item === 'object' && !Array.isArray(item)\n}\n\nexport function mergeDeep(target, source) {\n  const output = Object.assign({}, target)\n  if (isObject(target) && isObject(source)) {\n    for (const key of Object.keys(source)) {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, { [key]: source[key] })\n        } else {\n          output[key] = mergeDeep(target[key], source[key])\n        }\n      } else {\n        Object.assign(output, { [key]: source[key] })\n      }\n    }\n  }\n  return output\n}\n","export const objectKeys = <T>(obj: T): Array<keyof T> => Object.keys(obj as object) as Array<keyof typeof obj>\n","export function toHex(str) {\n  let result = ''\n  for (let i = 0; i < str.length; i++) {\n    result += str.charCodeAt(i).toString(16)\n  }\n  return result\n}\n","export const encode64 = (str) => {\n  try {\n    return btoa(encodeURIComponent(str || ''))\n  } catch {\n    return ''\n  }\n}\nexport const decode64 = (str) => {\n  try {\n    return decodeURIComponent(atob(str || ''))\n  } catch {\n    return ''\n  }\n}\n","export function preformatFloat(float: string) {\n  if (!float) {\n    return ''\n  }\n\n  // Index of first comma\n  const posC = float.indexOf(',')\n\n  if (posC === -1) {\n    // No commas found, treat as float\n    return float\n  }\n\n  // Index of first full stop\n  const posFS = float.indexOf('.')\n\n  if (posFS === -1) {\n    // Uses commas and not full stops - swap them (e.g. 1,23 --> 1.23)\n    return float.replace(/,/g, '.')\n  }\n\n  // Uses both commas and full stopsâ€”ensure correct order and remove 1000s separators.\n  return posC < posFS ? float.replace(/,/g, '') : float.replace(/\\./g, '').replace(',', '.')\n}\n","const DOT_NUM_REGEXP = /^\\d*[.]?(\\d*)$/\nconst COMMA_NUM_REGEXP = /^\\d*,?(\\d*)$/\n\nexport const isValidNumericString = (num: string): boolean => COMMA_NUM_REGEXP.test(num) || DOT_NUM_REGEXP.test(num)\n"],"mappings":"4ZAAA,IAAAA,GAAA,GAAAC,EAAAD,GAAA,kBAAAE,EAAA,iBAAAC,EAAA,kBAAAC,EAAA,eAAAC,EAAA,gBAAAC,EAAA,eAAAC,EAAA,aAAAC,EAAA,aAAAC,EAAA,gBAAAC,EAAA,YAAAC,EAAA,oBAAAC,EAAA,aAAAC,EAAA,qBAAAC,EAAA,gBAAAC,EAAA,iBAAAC,EAAA,kBAAAC,EAAA,yBAAAC,EAAA,cAAAC,EAAA,eAAAC,EAAA,uBAAAC,EAAA,QAAAC,EAAA,mBAAAC,EAAA,oBAAAC,EAAA,iBAAAC,EAAA,sBAAAC,EAAA,YAAAC,EAAA,UAAAC,EAAA,SAAAC,EAAA,eAAAC,EAAA,WAAAC,EAAA,SAAAC,EAAA,SAAAC,IAAA,eAAAC,EAAAlC,ICAA,eAAsBmC,EAAKC,EAA6B,CACtD,OAAO,IAAI,QAASC,GAAY,WAAW,IAAMA,EAAQ,IAAI,EAAGD,CAAI,CAAC,CACvE,CCFO,SAASE,EAAgBC,EAAe,CAC7C,OAAOA,EAAI,KAAK,OAAO,iBAAiB,CAC1C,CCAO,SAASC,EAAYC,EAAgB,CAC1C,IAAMC,EAAe,sBACfC,EAAkB,OAAOD,EAAa,MAAM,EAClD,OAAOD,GAAUE,EAAgB,KAAKF,CAAM,EAAIA,EAAO,QAAQC,EAAc,MAAM,EAAID,GAAU,EACnG,CAEO,SAASG,EAAqBC,EAAYC,EAAsBC,EAA0C,CAC/G,GAAI,CAACD,EACH,OAAOD,EAET,IAAMG,EAAM,IAAI,OAAOR,EAAYM,CAAY,EAAE,YAAY,EAAG,IAAI,EACpE,OAAOD,EAAM,OAAQI,IACH,OAAOF,GAAY,WAAaA,EAAQE,CAAG,EAAIF,EAAQ,IAAKG,GAAUD,EAAIC,CAAK,CAAC,GAElF,KAAMA,GAAU,CAAC,CAAC,UAAU,OAAOA,CAAK,EAAE,YAAY,CAAC,EAAE,MAAMF,CAAG,CAAC,CAClF,CACH,CClBO,SAASG,EAAiBC,EAAUC,EAAoB,CAC7D,IAAMC,EAAS,CAAC,EACZC,EAAI,EACF,EAAIH,EAAI,OACd,KAAOG,EAAI,GACTD,EAAO,KAAKF,EAAI,MAAMG,EAAGA,EAAIF,CAAG,CAAC,EACjCE,GAAKF,EAEP,OAAOC,CACT,CCTO,SAASE,EAAUC,EAAYC,EAA6B,CACjE,IAAMC,EAAS,CAAC,EACVC,EAAM,IAAI,IAChB,QAAWC,KAAQJ,EAAO,CACxB,IAAMK,EAAKJ,EAAOG,CAAI,EACjBD,EAAI,IAAIE,CAAE,IACbF,EAAI,IAAIE,EAAI,EAAI,EAChBH,EAAO,KAAKE,CAAI,EAEpB,CACA,OAAOF,CACT,CCXO,SAASI,EAAsBC,EAAgB,CACpD,OAAO,OAAO,KAAKA,CAAQ,EACxB,KAAK,EACL,OAAO,CAACC,EAAQC,KACfD,EAAIC,CAAG,EAAI,OAAOF,EAASE,CAAG,GAAM,SAAWH,EAAmBC,EAASE,CAAG,CAAC,EAAIF,EAASE,CAAG,EACxFD,GACN,CAAC,CAAM,CACd,CCPO,SAASE,EAAWC,EAAmB,CAC5C,OAAO,MAAM,QAAQA,CAAG,EAAIA,EAAM,CAACA,CAAG,CACxC,CCFO,IAAMC,EAAU,CAAIC,EAAYC,IACrCD,EAAM,OAAO,CAACE,EAAQC,IAAY,CAChC,IAAMC,EAAUH,EAAOE,CAAI,EAE3B,OAAKD,EAAOE,CAAO,GAQnBF,EAAOE,CAAO,EAAE,MAAM,KAAKD,CAAI,EACxBD,GARE,OAAO,OAAOA,EAAQ,CAC3B,CAACE,CAAO,EAAG,CACT,IAAKA,EACL,MAAO,CAACD,CAAI,CACd,CACF,CAAC,CAIL,EAAG,CAAC,CAAC,ECdA,SAASE,EAAaC,EAAaC,EAAqB,CAC7D,OAAO,KAAK,MAAM,KAAK,OAAO,GAAKA,EAAMD,EAAM,EAAE,EAAIA,CACvD,CCFA,IAAME,EAAK,IACT,KAAK,OAAO,EAAI,KAAK,OAAO,GAAK,KAAO,EACrC,SAAS,EAAE,EACX,UAAU,CAAC,EAET,SAASC,EAAKC,EAAM,IAAa,CACtC,MAAO,GAAGF,EAAG,EAAIA,EAAG,CAAC,IAAIA,EAAG,CAAC,IAAIA,EAAG,CAAC,IAAIA,EAAG,CAAC,IAAIA,EAAG,CAAC,GAAGA,EAAG,CAAC,GAAGA,EAAG,CAAC,GAAG,MAAM,EAAGE,CAAG,CACpF,CCPO,IAAMC,EAAsBC,GAAkBA,EAAM,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAM,MAAM,CAAC,ECA5F,SAASC,EAAYC,EAAwB,CAClD,IAAMC,EAAa,KAAK,MAAMD,CAAK,EACnC,MAAO,CAAC,OAAO,MAAMC,CAAU,CACjC,CCFO,IAAMC,EACX,uJAEK,SAASC,EAAaC,EAAwB,CACnD,OAAKA,EACEF,EAAa,KAAKE,CAAK,EADX,EAErB,CCPO,SAASC,EAAcC,EAAwB,CACpD,MAAO,CAAC,OAAO,MAAM,OAAO,WAAWA,CAAK,CAAC,GAAK,CAAC,OAAO,MAAM,OAAOA,CAAK,CAAC,CAC/E,CCFO,SAASC,EAAgBC,EAAeC,EAAaC,EAAsB,CAChF,OAAO,OAAOF,CAAK,GAAKC,GAAO,OAAOD,CAAK,GAAKE,CAClD,CCAO,SAASC,EAAiBC,EAAwB,CACvD,OAAOC,EAAcD,CAAK,GAAK,OAAOA,CAAK,EAAI,CACjD,CCJO,SAASE,EAAWC,EAAaC,EAAqB,CAC3D,OAAKD,IACEA,EAAI,OAASC,EAAMD,EAAI,UAAU,EAAGC,CAAG,EAAID,EACpD,CCHO,SAASE,EAAIC,EAAsBC,EAAO,EAAG,CAClD,IAAIC,EAAI,OAAOF,CAAG,EAClB,KAAOE,EAAE,OAASD,GAAMC,EAAI,IAAIA,CAAC,GACjC,OAAOA,CACT,CCJO,SAASC,EAAWC,EAAgB,CACzC,OAAOA,EAAO,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAO,MAAM,CAAC,CACxD,CCFO,IAAMC,EAAQC,GACdA,EACE,OAAOA,CAAG,EAAE,KAAK,EADP,GCEnB,IAAMC,EAAkB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EACrGC,EAAiB,CACrB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,UACF,EAEO,SAASC,EAAWC,EAAkBC,EAAsB,CACjE,IAAMC,EAAQ,iDAAiD,MAAM,GAAG,EAElEC,EAAI,IAAI,KAAKF,GAAQ,KAAK,IAAI,CAAC,EAC/BG,EAAID,EAAE,SAAS,EACfE,EAAIF,EAAE,SAAS,EACfG,EAAKD,EAAI,GAAK,KAAO,KAK3B,MAHY,GADDE,EAAIF,EAAI,IAAM,EAAE,CACV,IAAIC,CAAE,IAAIA,EAAG,YAAY,CAAC,IAAIR,EAAeM,CAAC,CAAC,IAAII,EAAWV,EAAeM,CAAC,CAAC,CAAC,IAC/FP,EAAgBO,CAAC,CACnB,IAAII,EAAWX,EAAgBO,CAAC,CAAC,CAAC,IAAID,EAAE,YAAY,CAAC,GAC1C,MAAM,SAAS,EAAE,OAAO,CAACH,EAAUS,EAAMC,IAAMV,EAAS,MAAME,EAAMQ,CAAC,CAAC,EAAE,KAAKD,CAAI,EAAGT,CAAQ,CACzG,CAEO,IAAMW,EAAc,CAACV,EAAqBW,IAAuB,CACtE,IAAMC,EAAS,IAAI,KAAKZ,CAAI,EAC5B,OAAAY,EAAO,QAAQA,EAAO,QAAQ,EAAID,CAAI,EAC/BC,CACT,ECrCO,SAASC,EAASC,EAAe,CACtC,OAAOA,GAAQ,OAAOA,GAAS,UAAY,CAAC,MAAM,QAAQA,CAAI,CAChE,CAEO,SAASC,EAAUC,EAAQC,EAAQ,CACxC,IAAMC,EAAS,OAAO,OAAO,CAAC,EAAGF,CAAM,EACvC,GAAIH,EAASG,CAAM,GAAKH,EAASI,CAAM,EACrC,QAAWE,KAAO,OAAO,KAAKF,CAAM,EAC9BJ,EAASI,EAAOE,CAAG,CAAC,EAChBA,KAAOH,EAGXE,EAAOC,CAAG,EAAIJ,EAAUC,EAAOG,CAAG,EAAGF,EAAOE,CAAG,CAAC,EAFhD,OAAO,OAAOD,EAAQ,CAAE,CAACC,CAAG,EAAGF,EAAOE,CAAG,CAAE,CAAC,EAK9C,OAAO,OAAOD,EAAQ,CAAE,CAACC,CAAG,EAAGF,EAAOE,CAAG,CAAE,CAAC,EAIlD,OAAOD,CACT,CCpBO,IAAME,EAAiBC,GAA2B,OAAO,KAAKA,CAAa,ECA3E,SAASC,EAAMC,EAAK,CACzB,IAAIC,EAAS,GACb,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,IAC9BD,GAAUD,EAAI,WAAWE,CAAC,EAAE,SAAS,EAAE,EAEzC,OAAOD,CACT,CCNO,IAAME,EAAYC,GAAQ,CAC/B,GAAI,CACF,OAAO,KAAK,mBAAmBA,GAAO,EAAE,CAAC,CAC3C,MAAQ,CACN,MAAO,EACT,CACF,EACaC,EAAYD,GAAQ,CAC/B,GAAI,CACF,OAAO,mBAAmB,KAAKA,GAAO,EAAE,CAAC,CAC3C,MAAQ,CACN,MAAO,EACT,CACF,ECbO,SAASE,EAAeC,EAAe,CAC5C,GAAI,CAACA,EACH,MAAO,GAIT,IAAMC,EAAOD,EAAM,QAAQ,GAAG,EAE9B,GAAIC,IAAS,GAEX,OAAOD,EAIT,IAAME,EAAQF,EAAM,QAAQ,GAAG,EAE/B,OAAIE,IAAU,GAELF,EAAM,QAAQ,KAAM,GAAG,EAIzBC,EAAOC,EAAQF,EAAM,QAAQ,KAAM,EAAE,EAAIA,EAAM,QAAQ,MAAO,EAAE,EAAE,QAAQ,IAAK,GAAG,CAC3F,CCvBA,IAAMG,EAAiB,iBACjBC,EAAmB,eAEZC,EAAwBC,GAAyBF,EAAiB,KAAKE,CAAG,GAAKH,EAAe,KAAKG,CAAG","names":["index_exports","__export","EMAIL_REGEXP","arrayFlatten","arrayToChunks","capitalize","dateAddDays","dateFormat","decode64","encode64","escapeRegex","groupBy","isNumberInRange","isObject","isPositiveNumber","isValidDate","isValidEmail","isValidNumber","isValidNumericString","mergeDeep","objectKeys","objectSortByFields","pad","preformatFloat","randomFromArray","randomNumber","searchArrayFilter","toArray","toHex","trim","trimBySize","uniqBy","uuid","wait","__toCommonJS","wait","time","resolve","arrayFlatten","arr","escapeRegex","string","reRegExpChar","reHasRegExpChar","searchArrayFilter","array","searchString","_fields","reg","sub","field","arrayToChunks","arr","len","chunks","i","uniqBy","array","getter","result","map","item","id","objectSortByFields","unsorted","obj","key","toArray","any","groupBy","items","getter","groups","item","dateKey","randomNumber","min","max","s4","uuid","len","randomFromArray","items","isValidDate","value","parsedDate","EMAIL_REGEXP","isValidEmail","email","isValidNumber","value","isNumberInRange","value","min","max","isPositiveNumber","value","isValidNumber","trimBySize","str","max","pad","num","size","n","capitalize","string","trim","str","monthNamesShort","monthNamesLong","dateFormat","template","date","specs","d","m","h","TT","pad","capitalize","item","i","dateAddDays","days","result","isObject","item","mergeDeep","target","source","output","key","objectKeys","obj","toHex","str","result","i","encode64","str","decode64","preformatFloat","float","posC","posFS","DOT_NUM_REGEXP","COMMA_NUM_REGEXP","isValidNumericString","num"]}