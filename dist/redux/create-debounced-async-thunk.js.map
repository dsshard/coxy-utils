{"version":3,"sources":["../../src/redux/create-debounced-async-thunk.ts"],"sourcesContent":["// based on:\n// https://stackoverflow.com/questions/68281810/how-to-debounce-createasyncthunk-from-redux-toolkit\n\nimport { type AsyncThunk, type AsyncThunkPayloadCreator, createAsyncThunk } from '@reduxjs/toolkit'\n\ntype TimeoutId = ReturnType<typeof setTimeout>\n\ntype DebounceSettings = {\n  wait: number\n\n  /**\n   * The maximum time `payloadCreator` is allowed to be delayed before\n   * it is invoked.\n   * @defaultValue `0`.\n   */\n  maxWait?: number\n  /**\n   * Specify invoking on the leading edge of the timeout.\n   * @defaultValue `false`.\n   */\n  leading?: boolean\n}\n\n/**\n * A debounced analogue of the `createAsyncThunk` from `@reduxjs/toolkit`\n * @param typePrefix - a string action type value\n * @param wait - the amount milliseconds to delay.\n * @param payloadCreator - a callback function that should return a promise containing the result\n *   of some asynchronous logic\n * @param options - the options object.\n */\n\nconst createDebouncedAsyncThunk = <Returned, ThunkArg = void>(\n  typePrefix: string,\n  options: DebounceSettings,\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg>,\n): AsyncThunk<Returned, ThunkArg, object> => {\n  const { maxWait = 0, leading = false } = options ?? {}\n  let timer: string | number | TimeoutId = 0\n  let maxTimer: string | number | TimeoutId = 0\n  let res: ((value: boolean) => void) | undefined\n  const invoke = (): void => {\n    clearTimeout(maxTimer)\n    maxTimer = 0\n\n    if (res) {\n      res(true)\n      res = undefined\n    }\n  }\n  const cancel = (): void => {\n    if (res) {\n      res(false)\n      res = undefined\n    }\n  }\n\n  return createAsyncThunk<Returned, ThunkArg>(typePrefix, payloadCreator as never, {\n    condition() {\n      const immediate = leading && !timer\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        invoke()\n        timer = 0\n      }, options.wait)\n\n      if (immediate) return true\n\n      cancel()\n\n      if (maxWait && !maxTimer) maxTimer = setTimeout(invoke, maxWait)\n\n      return new Promise<boolean>((resolve) => {\n        res = resolve\n      })\n    },\n  })\n}\n\n/*\n  Then debouncedAsyncThunk rejected it throws ConditionError\n*/\nexport const isConditionError = (\n  toBeDetermined: unknown,\n): toBeDetermined is { name: 'ConditionError'; message: string } =>\n  (toBeDetermined as { name: 'ConditionError'; message: string })?.name === 'ConditionError'\n\nexport default createDebouncedAsyncThunk\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,EAAA,qBAAAC,IAAA,eAAAC,EAAAJ,GAGA,IAAAK,EAAiF,4BA6B3EC,EAA4B,CAChCC,EACAC,EACAC,IAC2C,CAC3C,GAAM,CAAE,QAAAC,EAAU,EAAG,QAAAC,EAAU,EAAM,EAAIH,GAAW,CAAC,EACjDI,EAAqC,EACrCC,EAAwC,EACxCC,EACEC,EAAS,IAAY,CACzB,aAAaF,CAAQ,EACrBA,EAAW,EAEPC,IACFA,EAAI,EAAI,EACRA,EAAM,OAEV,EACME,EAAS,IAAY,CACrBF,IACFA,EAAI,EAAK,EACTA,EAAM,OAEV,EAEA,SAAO,oBAAqCP,EAAYE,EAAyB,CAC/E,WAAY,CACV,IAAMQ,EAAYN,GAAW,CAACC,EAO9B,OANA,aAAaA,CAAK,EAClBA,EAAQ,WAAW,IAAM,CACvBG,EAAO,EACPH,EAAQ,CACV,EAAGJ,EAAQ,IAAI,EAEXS,EAAkB,IAEtBD,EAAO,EAEHN,GAAW,CAACG,IAAUA,EAAW,WAAWE,EAAQL,CAAO,GAExD,IAAI,QAAkBQ,GAAY,CACvCJ,EAAMI,CACR,CAAC,EACH,CACF,CAAC,CACH,EAKaf,EACXgB,GAECA,GAAgE,OAAS,iBAErEjB,EAAQI","names":["create_debounced_async_thunk_exports","__export","create_debounced_async_thunk_default","isConditionError","__toCommonJS","import_toolkit","createDebouncedAsyncThunk","typePrefix","options","payloadCreator","maxWait","leading","timer","maxTimer","res","invoke","cancel","immediate","resolve","toBeDetermined"]}