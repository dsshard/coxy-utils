{"version":3,"sources":["../../src/use/use-event.ts"],"sourcesContent":["// https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md#when-useevent-should-not-be-used\n\nimport { useCallback, useEffect, useRef } from 'react'\n\n// type Fn = (...args: unknown[]) => any\n// type ReturnUseEvent<T extends Fn> = (...args: Parameters<T>) => ReturnType<T>\n\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\ntype AnyFunction = (...args: any[]) => any\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function useEvent<T extends AnyFunction>(callback: T): T {\n  const handlerRef = useRef(callback)\n\n  // In a real implementation, this would run before layout effects\n  useEffect(() => {\n    handlerRef.current = callback\n  })\n\n  const action = useCallback((...args: Parameters<T>) => {\n    // In a real implementation, this would throw if called during render.\n    const fn = handlerRef.current\n    return fn(...args)\n  }, [])\n\n  return action as T\n}\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,cAAAE,IAAA,eAAAC,EAAAH,GAEA,IAAAI,EAA+C,iBASxC,SAASF,EAAgCG,EAAgB,CAC9D,IAAMC,KAAa,UAAOD,CAAQ,EAGlC,sBAAU,IAAM,CACdC,EAAW,QAAUD,CACvB,CAAC,KAEc,eAAY,IAAIE,IAAwB,CAErD,IAAMC,EAAKF,EAAW,QACtB,OAAOE,EAAG,GAAGD,CAAI,CACnB,EAAG,CAAC,CAAC,CAGP","names":["use_event_exports","__export","useEvent","__toCommonJS","import_react","callback","handlerRef","args","fn"]}