{"version":3,"sources":["../../src/use/use-search.ts","../../src/data/array-search-in-by-field.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\n\nimport { searchArrayFilter } from '../data/array-search-in-by-field'\n\nexport function useSearch<T>(array: T[], fields: Array<keyof T>): [(text: string) => void, T[], boolean] {\n  const [searchText, setSearchText] = useState<string | null>(null)\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n  const handleSearch = useCallback(\n    (text: string) => {\n      const trimmedText = text ? text.trim() : text\n      if (!trimmedText) {\n        setSearchText(null)\n      } else {\n        setSearchText(trimmedText)\n      }\n    },\n    [array],\n  )\n\n  const filtered = searchText ? searchArrayFilter(array, searchText, fields) : array\n\n  return [handleSearch, filtered, !!searchText]\n}\n","type FieldExtractor<T> = (sub: T) => string\n\nexport function escapeRegex(string: string) {\n  const reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g\n  const reHasRegExpChar = RegExp(reRegExpChar.source)\n  return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\\\$&') : string || ''\n}\n\nexport function searchArrayFilter<T>(array: T[], searchString: string, _fields: (keyof T)[] | FieldExtractor<T>) {\n  if (!searchString) {\n    return array\n  }\n  const reg = new RegExp(escapeRegex(searchString).toLowerCase(), 'ig')\n  return array.filter((sub: T) => {\n    const fields = (typeof _fields === 'function' ? _fields(sub) : _fields.map((field) => sub[field])) as string[]\n\n    return fields.some((field) => !!encodeURI(String(field).toLowerCase()).match(reg))\n  })\n}\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,eAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAsC,iBCE/B,SAASC,EAAYC,EAAgB,CAC1C,IAAMC,EAAe,sBACfC,EAAkB,OAAOD,EAAa,MAAM,EAClD,OAAOD,GAAUE,EAAgB,KAAKF,CAAM,EAAIA,EAAO,QAAQC,EAAc,MAAM,EAAID,GAAU,EACnG,CAEO,SAASG,EAAqBC,EAAYC,EAAsBC,EAA0C,CAC/G,GAAI,CAACD,EACH,OAAOD,EAET,IAAMG,EAAM,IAAI,OAAOR,EAAYM,CAAY,EAAE,YAAY,EAAG,IAAI,EACpE,OAAOD,EAAM,OAAQI,IACH,OAAOF,GAAY,WAAaA,EAAQE,CAAG,EAAIF,EAAQ,IAAKG,GAAUD,EAAIC,CAAK,CAAC,GAElF,KAAMA,GAAU,CAAC,CAAC,UAAU,OAAOA,CAAK,EAAE,YAAY,CAAC,EAAE,MAAMF,CAAG,CAAC,CAClF,CACH,CDdO,SAASG,EAAaC,EAAYC,EAAgE,CACvG,GAAM,CAACC,EAAYC,CAAa,KAAI,YAAwB,IAAI,EAG1DC,KAAe,eAClBC,GAAiB,CAChB,IAAMC,EAAcD,GAAOA,EAAK,KAAK,EAInCF,EAHGG,GACW,IAEW,CAE7B,EACA,CAACN,CAAK,CACR,EAEMO,EAAWL,EAAaM,EAAkBR,EAAOE,EAAYD,CAAM,EAAID,EAE7E,MAAO,CAACI,EAAcG,EAAU,CAAC,CAACL,CAAU,CAC9C","names":["use_search_exports","__export","useSearch","__toCommonJS","import_react","escapeRegex","string","reRegExpChar","reHasRegExpChar","searchArrayFilter","array","searchString","_fields","reg","sub","field","useSearch","array","fields","searchText","setSearchText","handleSearch","text","trimmedText","filtered","searchArrayFilter"]}